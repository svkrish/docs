{"componentChunkName":"component---src-pages-deployments-openshift-mdx","path":"/deployments/openshift/","result":{"pageContext":{"frontmatter":{"title":"Deploy Storefront Microservices onto Openshift","description":"Instructions to deploy on Openshift"},"relativePagePath":"/deployments/openshift.mdx","titleType":"page","MdxNode":{"id":"a00d451a-cac1-51f4-9d1d-40330f809c60","children":[],"parent":"c62c34c9-99b9-522f-8db5-0407dad28551","internal":{"content":"---\ntitle: Deploy Storefront Microservices onto Openshift\ndescription: Instructions to deploy on Openshift\n---\n\n## Introduction\nToday you will be learning how to deploy all storefront microservices on Openshift using Tekton\n\n![Storefront Architecture](../../images/storefront.png)\n\n## Table of Contents\n  * [Pre-requisites](#pre-requisites)\n  * [Set Up Databases for Storefront](#set-up-databases-for-storefront)\n  * [Create an organization on Github](#create-an-organization-on-github)\n  * [Deploy Microservices to Openshift](#deploy-microservices-to-openshift)\n  * [Trigger the Webhook](#trigger-the-webhook)\n\n## Pre-requisites \n\n+ [`Openshift`](https://docs.openshift.com/container-platform/4.3/welcome/index.html)\n+ [`Kabanero`](https://kabanero.io/)\n+ [`CloudPak for Apps`](https://www.ibm.com/cloud/cloud-pak-for-applications)\n+ [`Docker cli`](https://docs.docker.com/docker-for-mac/install/)\n+ [`Git cli`](https://git-scm.com/downloads)\n+ [`OC cli`](https://docs.openshift.com/container-platform/4.3/welcome/index.html)\n+ [`Tekton cli`](https://github.com/tektoncd/cli)\n+ [`gh cli`](https://cli.github.com/)\n+ [appsody](https://appsody.dev/docs/getting-started/installation)\n\n\n## Set Up Databases for Storefront\n\nThis project will demonstrate how to deploy all the databases that are required by the storefront application. This will show you how to deploy MySQL, Elasticsearch, CouchDB, and MariaDB databases.\n\n### Clone the repo\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/storefront-databases.git\ncd storefront-databases\nchmod +x ./setup_databases.sh\n```\n\nRun the below command to deploy the databases on the openshift cluster where `storefront-dev` is the project name.\n\n```bash\noc login --token={your-api-token} --server={your-servername}\n./setup_databases.sh storefront-dev\n```\n\nThe output should be something similar to what is shown below.\n```bash\n> ./setup_databases.sh storefront-dev\nNAMESPACE not set. Using parameter \"storefront-dev\"\n=========================================================================\nSet namespace\nerror: A project named \"storefront-dev\" does not exist on \"https://c100-e.us-east.containers.cloud.ibm.com:30077\".\nYour projects are:\n* calico-system\n* catapp\n* csantana-cf2k8s-test1\n.\n.\n.\n* ta\n* tekton-pipelines\n* tigera-operator\nTo see projects on another server, pass '--server=<server>'.\nNow using project \"storefront-dev\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:30077\".\n\nYou can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app centos/ruby-25-centos7~https://github.com/sclorg/ruby-ex.git\n\nto build a new example application in Ruby.\n=========================================================================\nAdding security constraints\nscc \"anyuid\" added to: [\"system:serviceaccount:storefront-dev:default\"]\nscc \"privileged\" added to: [\"system:serviceaccount:storefront-dev:default\"]\n=========================================================================\nGenerating necessary secrets\nsecret/customer-couchdb-couchdb created\nsecret/orders-mariadb-secret created\nsecret/inventory-mysql created\n=========================================================================\nGenerating necessary configmaps\nconfigmap/customer-couchdb-couchdb created\nconfigmap/mariadb-configmap created\nconfigmap/orders-mariadb-tests created\nconfigmap/inventory-mysql-test created\n=========================================================================\nDeploying the databases\nstatefulset.apps/customer-couchdb-couchdb created\ndeployment.apps/elasticsearch created\nstatefulset.apps/orders-mariadb created\ndeployment.extensions/inventory-mysql created\nWaiting for deployment \"inventory-mysql\" rollout to finish: 0 of 1 updated replicas are available...\ndeployment \"inventory-mysql\" successfully rolled out\ndeployment \"elasticsearch\" successfully rolled out\nWaiting for 1 pods to be ready...\npartitioned roll out complete: 1 new pods have been updated...\nWaiting for 1 pods to be ready...\nstatefulset rolling update complete 1 pods at revision orders-mariadb-77b894447...\n=========================================================================\nCreating database services\nservice/customer-couchdb-couchdb created\nservice/customer-couchdb-svc-couchdb created\nservice/elasticsearch created\nservice/orders-mariadb created\nservice/inventory-mysql created\n=========================================================================\nPopulating data in database\nconfigmap/inventory-ms-spring-data created\njob.batch/inventory-ms-spring-populate-mysql created\njob.batch/customer-ms-spring-create-user created\njob.batch/inventory-ms-spring-populate-mysql condition met\njob.batch/customer-ms-spring-create-user condition met\n=========================================================================\n```\n\nNow access your new project \n```\noc project storefront-dev\n```\nYou should get an output similar to what is shown below\n\n```bash\n> oc project storefront-dev\n> oc get pods\n  NAME                                       READY     STATUS      RESTARTS   AGE\n  customer-couchdb-couchdb-0                 2/2       Running     0          5m55s\n  customer-ms-spring-create-user-v26cw       0/1       Completed   0          5m1s\n  elasticsearch-7b49df8497-p87fd             1/1       Running     0          5m55s\n  inventory-ms-spring-populate-mysql-dz8n4   0/1       Completed   0          5m2s\n  inventory-mysql-8667979689-mcgkb           1/1       Running     0          5m54s\n  orders-mariadb-0                           1/1       Running     0          5m55s\n```\nUpon completing this section you can see above all of your databases have been deployed onto your openshift cluster.\n\n## Create an organization on Github\n\nWhen you create a new organization from scratch, it doesn't have any repositories associated with it.\n\nGithub has information on how to create an organization. View the link below for the steps:\n\nhttps://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/creating-a-new-organization-from-scratch\n\n## Clone the storefront-repo-automator to run the script \n\nYou can manually create a new repo and added it onto your Github organization or you can use the script that we provided for you. Clone the repository [storefront-repo-automator](https://github.com/ibm-garage-ref-storefront/storefront-repo-automator) as shown below:\n\nOnce you have cloned the repository, make sure you run the following command: \n\n``` bash\ngit clone https://github.com/ibm-garage-ref-storefront/storefront-repo-automator\ncd storefront-repo-automator\nexport org={organization name}\nexport initials={your initials}\n./run.sh $org $initials \n```\nAfter running the storefront-repo-automator, you should be able to see the storefront repositories as shown below.\n\n![Storefront](../../images/storefront-org.png)\n\n## Deploy Microservices to Openshift\n\nToday you will learning how to deploy all microservices to Openshift by creating a Webhook on Tekton. To achieve this, you must run the following steps:\n\n- Go on [cloud.ibm.com](cloud.ibm.com)\n\n- On the resource list, you should see a list of your clusters.\n\n- Once you have the cluster you want to work on, click on the Openshift web console. When you are on the Openshift web console, click on the box icon and go into Cloud Pak console. \n\n**See image below for reference**\n\n![Storefront](../../images/creating-webhook-step1.png) \n\nOnce you are inside the IBM Cloud Pak console, click on the second icon to access the * **Instances** * page. On the page inside the Pipeline box, click on the button * **Manage Pipelines** *\n\n![Storefront](../../images/creating-webhook-step2.png)\n\nGo to your Tekton Dashboard and click `Webhooks` as shown in Step 1. After you click on `Webhooks` you should be able to `Add Webhook` as shown in step 2.\n\n![Storefront](../../images/creating-webhook-step3.png)\n\n## Trigger the Webhook\n\nTo trigger your Webhook, you must run the following steps for each microservice:\n\n- customer\n- orders\n- inventory\n- catalog\n- auth\n- storefront-ui\n\nCreate a webhook for each microservice as shown below: \n\nFor the java applications (customer, orders, inventory, catalog, auth) use the `java-springboot2-build-deploy-pl` \nand for the applications (storefront-ui) use `nodejs-build-deploy-pl` as the pipeline.\n\n![Storefront](../../images/creating-webhook-step4.png)\n\nYour webhooks page should look something similar as shown below:\n\n![Storefront](../../images/webhooks.png)\n\nMake a small change to trigger the pipeline such as editing the README.md file and commit to trigger a change for all microservices.\n\n![Storefront](../../images/creating-webhook-step6.png)\n\nOnce you make your changes onto your repositories you should see something as shown below: \n\n![Storefront](../../images/creating-webhook-step5.png)\n\nOnce all of your pipelines complete as shown below you can run the following command to get your url.\n\n![Storefront](../../images/pipelines-passing.png)\n\n```bash\n> oc project storefront-dev\n> oc get routes | grep \"web\"\nweb  web-storefront-dev-hk.gse-cloud-native-ocp4-fa9ee67c9ab6a7791435450358e564cc-0000.us-east.containers.appdomain.cloud web 3000-tcp  None\n```\nNow go to your browser and type in \n`web-storefront-dev-hk.gse-cloud-native-ocp4-fa9ee67c9ab6a7791435450358e564cc-0000.us-east.containers.appdomain.cloud web`\n","type":"Mdx","contentDigest":"f7b347d5bbf9283f2875c936fc244487","counter":103,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Deploy Storefront Microservices onto Openshift","description":"Instructions to deploy on Openshift"},"exports":{},"rawBody":"---\ntitle: Deploy Storefront Microservices onto Openshift\ndescription: Instructions to deploy on Openshift\n---\n\n## Introduction\nToday you will be learning how to deploy all storefront microservices on Openshift using Tekton\n\n![Storefront Architecture](../../images/storefront.png)\n\n## Table of Contents\n  * [Pre-requisites](#pre-requisites)\n  * [Set Up Databases for Storefront](#set-up-databases-for-storefront)\n  * [Create an organization on Github](#create-an-organization-on-github)\n  * [Deploy Microservices to Openshift](#deploy-microservices-to-openshift)\n  * [Trigger the Webhook](#trigger-the-webhook)\n\n## Pre-requisites \n\n+ [`Openshift`](https://docs.openshift.com/container-platform/4.3/welcome/index.html)\n+ [`Kabanero`](https://kabanero.io/)\n+ [`CloudPak for Apps`](https://www.ibm.com/cloud/cloud-pak-for-applications)\n+ [`Docker cli`](https://docs.docker.com/docker-for-mac/install/)\n+ [`Git cli`](https://git-scm.com/downloads)\n+ [`OC cli`](https://docs.openshift.com/container-platform/4.3/welcome/index.html)\n+ [`Tekton cli`](https://github.com/tektoncd/cli)\n+ [`gh cli`](https://cli.github.com/)\n+ [appsody](https://appsody.dev/docs/getting-started/installation)\n\n\n## Set Up Databases for Storefront\n\nThis project will demonstrate how to deploy all the databases that are required by the storefront application. This will show you how to deploy MySQL, Elasticsearch, CouchDB, and MariaDB databases.\n\n### Clone the repo\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/storefront-databases.git\ncd storefront-databases\nchmod +x ./setup_databases.sh\n```\n\nRun the below command to deploy the databases on the openshift cluster where `storefront-dev` is the project name.\n\n```bash\noc login --token={your-api-token} --server={your-servername}\n./setup_databases.sh storefront-dev\n```\n\nThe output should be something similar to what is shown below.\n```bash\n> ./setup_databases.sh storefront-dev\nNAMESPACE not set. Using parameter \"storefront-dev\"\n=========================================================================\nSet namespace\nerror: A project named \"storefront-dev\" does not exist on \"https://c100-e.us-east.containers.cloud.ibm.com:30077\".\nYour projects are:\n* calico-system\n* catapp\n* csantana-cf2k8s-test1\n.\n.\n.\n* ta\n* tekton-pipelines\n* tigera-operator\nTo see projects on another server, pass '--server=<server>'.\nNow using project \"storefront-dev\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:30077\".\n\nYou can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app centos/ruby-25-centos7~https://github.com/sclorg/ruby-ex.git\n\nto build a new example application in Ruby.\n=========================================================================\nAdding security constraints\nscc \"anyuid\" added to: [\"system:serviceaccount:storefront-dev:default\"]\nscc \"privileged\" added to: [\"system:serviceaccount:storefront-dev:default\"]\n=========================================================================\nGenerating necessary secrets\nsecret/customer-couchdb-couchdb created\nsecret/orders-mariadb-secret created\nsecret/inventory-mysql created\n=========================================================================\nGenerating necessary configmaps\nconfigmap/customer-couchdb-couchdb created\nconfigmap/mariadb-configmap created\nconfigmap/orders-mariadb-tests created\nconfigmap/inventory-mysql-test created\n=========================================================================\nDeploying the databases\nstatefulset.apps/customer-couchdb-couchdb created\ndeployment.apps/elasticsearch created\nstatefulset.apps/orders-mariadb created\ndeployment.extensions/inventory-mysql created\nWaiting for deployment \"inventory-mysql\" rollout to finish: 0 of 1 updated replicas are available...\ndeployment \"inventory-mysql\" successfully rolled out\ndeployment \"elasticsearch\" successfully rolled out\nWaiting for 1 pods to be ready...\npartitioned roll out complete: 1 new pods have been updated...\nWaiting for 1 pods to be ready...\nstatefulset rolling update complete 1 pods at revision orders-mariadb-77b894447...\n=========================================================================\nCreating database services\nservice/customer-couchdb-couchdb created\nservice/customer-couchdb-svc-couchdb created\nservice/elasticsearch created\nservice/orders-mariadb created\nservice/inventory-mysql created\n=========================================================================\nPopulating data in database\nconfigmap/inventory-ms-spring-data created\njob.batch/inventory-ms-spring-populate-mysql created\njob.batch/customer-ms-spring-create-user created\njob.batch/inventory-ms-spring-populate-mysql condition met\njob.batch/customer-ms-spring-create-user condition met\n=========================================================================\n```\n\nNow access your new project \n```\noc project storefront-dev\n```\nYou should get an output similar to what is shown below\n\n```bash\n> oc project storefront-dev\n> oc get pods\n  NAME                                       READY     STATUS      RESTARTS   AGE\n  customer-couchdb-couchdb-0                 2/2       Running     0          5m55s\n  customer-ms-spring-create-user-v26cw       0/1       Completed   0          5m1s\n  elasticsearch-7b49df8497-p87fd             1/1       Running     0          5m55s\n  inventory-ms-spring-populate-mysql-dz8n4   0/1       Completed   0          5m2s\n  inventory-mysql-8667979689-mcgkb           1/1       Running     0          5m54s\n  orders-mariadb-0                           1/1       Running     0          5m55s\n```\nUpon completing this section you can see above all of your databases have been deployed onto your openshift cluster.\n\n## Create an organization on Github\n\nWhen you create a new organization from scratch, it doesn't have any repositories associated with it.\n\nGithub has information on how to create an organization. View the link below for the steps:\n\nhttps://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/creating-a-new-organization-from-scratch\n\n## Clone the storefront-repo-automator to run the script \n\nYou can manually create a new repo and added it onto your Github organization or you can use the script that we provided for you. Clone the repository [storefront-repo-automator](https://github.com/ibm-garage-ref-storefront/storefront-repo-automator) as shown below:\n\nOnce you have cloned the repository, make sure you run the following command: \n\n``` bash\ngit clone https://github.com/ibm-garage-ref-storefront/storefront-repo-automator\ncd storefront-repo-automator\nexport org={organization name}\nexport initials={your initials}\n./run.sh $org $initials \n```\nAfter running the storefront-repo-automator, you should be able to see the storefront repositories as shown below.\n\n![Storefront](../../images/storefront-org.png)\n\n## Deploy Microservices to Openshift\n\nToday you will learning how to deploy all microservices to Openshift by creating a Webhook on Tekton. To achieve this, you must run the following steps:\n\n- Go on [cloud.ibm.com](cloud.ibm.com)\n\n- On the resource list, you should see a list of your clusters.\n\n- Once you have the cluster you want to work on, click on the Openshift web console. When you are on the Openshift web console, click on the box icon and go into Cloud Pak console. \n\n**See image below for reference**\n\n![Storefront](../../images/creating-webhook-step1.png) \n\nOnce you are inside the IBM Cloud Pak console, click on the second icon to access the * **Instances** * page. On the page inside the Pipeline box, click on the button * **Manage Pipelines** *\n\n![Storefront](../../images/creating-webhook-step2.png)\n\nGo to your Tekton Dashboard and click `Webhooks` as shown in Step 1. After you click on `Webhooks` you should be able to `Add Webhook` as shown in step 2.\n\n![Storefront](../../images/creating-webhook-step3.png)\n\n## Trigger the Webhook\n\nTo trigger your Webhook, you must run the following steps for each microservice:\n\n- customer\n- orders\n- inventory\n- catalog\n- auth\n- storefront-ui\n\nCreate a webhook for each microservice as shown below: \n\nFor the java applications (customer, orders, inventory, catalog, auth) use the `java-springboot2-build-deploy-pl` \nand for the applications (storefront-ui) use `nodejs-build-deploy-pl` as the pipeline.\n\n![Storefront](../../images/creating-webhook-step4.png)\n\nYour webhooks page should look something similar as shown below:\n\n![Storefront](../../images/webhooks.png)\n\nMake a small change to trigger the pipeline such as editing the README.md file and commit to trigger a change for all microservices.\n\n![Storefront](../../images/creating-webhook-step6.png)\n\nOnce you make your changes onto your repositories you should see something as shown below: \n\n![Storefront](../../images/creating-webhook-step5.png)\n\nOnce all of your pipelines complete as shown below you can run the following command to get your url.\n\n![Storefront](../../images/pipelines-passing.png)\n\n```bash\n> oc project storefront-dev\n> oc get routes | grep \"web\"\nweb  web-storefront-dev-hk.gse-cloud-native-ocp4-fa9ee67c9ab6a7791435450358e564cc-0000.us-east.containers.appdomain.cloud web 3000-tcp  None\n```\nNow go to your browser and type in \n`web-storefront-dev-hk.gse-cloud-native-ocp4-fa9ee67c9ab6a7791435450358e564cc-0000.us-east.containers.appdomain.cloud web`\n","fileAbsolutePath":"/home/travis/build/ibm-garage-ref-storefront/docs/src/pages/deployments/openshift.mdx"}}}}